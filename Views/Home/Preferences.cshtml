@model VacationAccrualViewModel
@{
    ViewData["Title"] = "Preferences";
}
<h1>@ViewData["Title"]</h1>

<hr />

<div class="row">
    <div class="col-sm-4 col-md-3">
        <div class="form-group">
            <label>Start date</label>
            @Html.DropDownListFor(m => m.StartDate, Model.StartDateList)
            <small class="form-text text-muted">
                Start date of the current pay period.
            </small>
        </div>
        <div class="form-group">
            <label>Accrual</label>
            @Html.TextBoxFor(m => m.Accrual, new { @maxlength = "4", @class = "textbox" })
            <small class="form-text text-muted">
                Accrual hours per pay period.
            </small>
        </div>
    </div>
    <div class="col-sm-4 col-md-3">
        <div class="form-group">
            <label>Max balance</label>
            @Html.TextBoxFor(m => m.MaxBalance, new { @maxlength = "3", @class = "textbox" })
            <small class="form-text text-muted">
                Maximum balance hours limit.
            </small>
        </div>
        <div class="form-group">
            <label>Balance</label>
            @Html.TextBoxFor(m => m.Balance, new { @maxlength = "6", @class = "textbox" })
            <small class="form-text text-muted">
                Balance hours of previous pay period.
            </small>
        </div>
    </div>
    <div class="col-sm-4 col-md-4">
        <div class="form-group">
            <label>Period</label>
            @Html.DropDownListFor(m => m.Period, Model.Periods)
            <small class="form-text text-muted">
                Number of future pay periods to be forecasted.
            </small>
        </div>
        <div class="form-group">
            <label>Take Days Off</label>
            @Html.DropDownListFor(m => m.DaysOff, Model.DaysOffList)
            <small class="form-text text-muted">
                Before it hits the max balance limit.
            </small>
        </div>
    </div>
</div>

<div class="row" style="padding-top:1em">
    <div class="col-md-12">
        <h4>Email reminders.</h4>
        <hr />
        <div class="form-check">
            @Html.CheckBoxFor(m => m.ReceiveEmailReminder, new { @class="form-check-input" })
            <label>
                Receive reminder emails to take vacation during pay periods whenever take (hours) is greater than zero.
            </label>
        </div>
        <div class="form-group" style="padding-left:2.5em">
            <label>Receive it </label>
            @Html.DropDownListFor(m => m.ReceiveDaysBefore, Model.ReceiveDaysBeforeList)
            <label> day(s) before the end date of a pay period.</label>
        </div>
    </div>
</div>

<div style="padding-top:1em">
    <button id="saveBtn" type="submit" class="btn btn-success">Save</button>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {

            @if (TempData["FirstTimeLogin"] != null && (bool)TempData["FirstTimeLogin"])
            {
                @:toastr["info"]("First, let's set your preferences");
            }

            $("#saveBtn").click(function() {
                var btn = $(this);
                btn.prop('disabled', true);
                btn.html('<i class="fas fa-sync-alt fa-spin"></i> Save');

                var VacationAccrualViewModel = {
                    StartDate: $("#StartDate").val(),
                    Accrual: $("#Accrual").val(),
                    MaxBalance: $("#MaxBalance").val(),
                    Balance: $("#Balance").val(),
                    Period: $("#Period").val(),
                    DaysOff: $("#DaysOff").val(),
                    ReceiveEmailReminder: $("#ReceiveEmailReminder").is(":checked"),
                    ReceiveDaysBefore: $("#ReceiveDaysBefore").val()
                };

                $.ajax({
                    url: '@Url.Action("SavePreferences", "Home")',
                    type: 'POST',
                    data: VacationAccrualViewModel,
                    success: function(response) {
                        btn.html('Save');
                        btn.prop('disabled', false);
                        if (response == "Saved!") {
                            toastr["success"](response);
                        }
                        else {
                            toastr["error"](response, "Error");
                        }
                    }
                });
            });
        });
    </script>
}