@model VacationAccrual.Models.VacationAccrualViewModel
<div style="text-align:center"><h3>Vacation Accrual Forecast Calculator</h3></div>
<br />
@using(Html.BeginForm("", "", FormMethod.Post, new { autocomplete="off" }))
{
    <div style="text-align:center">
        <label>Current Pay Period Startdate:</label>&nbsp;
        @Html.DropDownListFor(m => m.SelectedStartDate, Model.StartDateList)
        <label>Max Balance Limit:</label>&nbsp;
        @Html.TextBoxFor(m => m.MaxBalance, new { @maxlength = "3", @class = "textbox"})
        <label>Pay Periods:</label>&nbsp;
        @Html.DropDownListFor(m => m.SelectedPeriods, Model.Periods)
        <br /><br />
        <label>Accrual:</label>&nbsp;
        @Html.TextBoxFor(m => m.Accrual, new { @maxlength = "4", @class = "textbox"})
        <label>Previous Pay Period Balance:</label>&nbsp;
        @Html.TextBoxFor(m => m.Balance, new { @maxlength = "6", @class = "textbox"})
        <input id="submitBtn" type="submit" value="Calculate" class="btn btn-default" />
    </div>
}
<br /> <br />
@if (Model != null && Model.PeriodList !=null) 
{
    <label id="takeMsg">Take @Html.DropDownListFor(m => m.SelectedDaysOff, Model.DaysOff) day(s) off before it hits the max balance limit</label>
    <table id="periodsTbl" align="center" class="table table-striped table-hover">
        <thead> 
            <tr>
                <th>Period</th>
                <th>Accrual</th>
                <th>Take</th>
                <th>Balance</th>
                <th>Forfeit</th>
            </tr>
        </thead>
        <tbody>
            @{
                foreach (var item in Model.PeriodList)
                {
                    <tr>
                        <td>@item.Period</td>
                        <td class="accrual">@item.Accrual</td>
                        <td>@Html.TextBoxFor(m => item.Take, new { @maxlength = "4", @class = "take" })</td>
                        <td class="balance">@item.Balance</td>
                        <td class="forfeit">@item.Forfeit</td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@section Scripts {
    <script>
        $(document).ready(function(){
            $("#periodsTbl td:nth-child(3)").each(function () {
                if (parseFloat($(this).find(".take").val()) > 0) {
                    $(this).find(".take").addClass('takeHours');
                }
            });
            $("#periodsTbl td:nth-child(5)").each(function () {
                if (parseInt($(this).text()) > 0) {
                    $(this).addClass('forfeitWarn');
                }
            });
            $("#SelectedDaysOff").change(function(){
                var daysOff = this.value;
                var accrual, take, balance, forfeit = 0;
                $("#periodsTbl tr").each(function (index) {
                    take = 0;
                    if(index > 0) {
                        if(index == 1) {
                            accrual = parseFloat($(this).find(".accrual").text());
                            balance = parseFloat($(this).find(".balance").text());
                        }
                        else {
                            balance = balance + accrual;
                        }
                        if(balance > @Model.MaxBalance){
                            take = 8 * daysOff;
                            if(take != 0) {
                                balance -= take;
                            }
                            else {
                                forfeit += balance - @Model.MaxBalance;
                                balance = @Model.MaxBalance;
                            }
                        }
                        $(this).find(".take").val(take);
                        $(this).find(".balance").text(balance.toFixed(2));
                        $(this).find(".forfeit").text(forfeit.toFixed(2));
                    }
                });
                formatTblCells();
            });
            $("#periodsTbl input").on('input', function(){
                var accrual, take, balance, forfeit = 0;
                $("#periodsTbl tr").each(function (index) {
                    take = parseFloat($(this).find(".take").val());
                    if(isNaN(take)) {
                        take = 0;
                    }
                    if(index > 0) {
                        if(index == 1) {
                            accrual = parseFloat($(this).find(".accrual").text());
                            balance = parseFloat($(this).find(".balance").text());
                        }
                        else {
                            balance += accrual - take;
                        }
                        if(balance > @Model.MaxBalance){
                            forfeit += balance - @Model.MaxBalance;
                            balance = @Model.MaxBalance;
                        }
                        $(this).find(".balance").text(balance.toFixed(2));
                        $(this).find(".forfeit").text(forfeit.toFixed(2));
                    }
                });
                formatTblCells();
            });
        });
        function formatTblCells() {
            $("#periodsTbl td:nth-child(3)").each(function () {
                if (parseFloat($(this).find(".take").val()) > 0) {
                    $(this).find(".take").addClass('takeHours');
                }
                else {
                    $(this).find(".take").removeClass('takeHours');
                }
            });
            $("#periodsTbl td:nth-child(5)").each(function () {
                if (parseInt($(this).text()) > 0) {
                    $(this).addClass('forfeitWarn');
                }
                else {
                    $(this).removeClass('forfeitWarn');
                }
            });
        }
    </script>
}